using Content.Client.UserInterface.Controls;
using Content.Shared.Borgs;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.Borgs
{
    [GenerateTypedNameReferences]
    public sealed partial class LawsMenu : FancyWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private readonly LawsBoundUserInterface _owner;

        public LawsMenu(LawsBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _owner = owner;

            UpdateLaws();

            if (_entityManager.TryGetComponent<LawsComponent>(owner.Owner, out var laws))
                StateLawsButton.Visible = laws.CanState;

            StateLawsButton.OnPressed += _ =>
            {
                StateLaws();
            };
        }

        public void UpdateLaws()
        {
            if (!_entityManager.TryGetComponent<LawsComponent>(_owner.Owner, out var laws))
                return;

            Laws.DisposeAllChildren();

            foreach (var law in laws.Laws)
            {
                var newLabel = new LawUIContainer();
                var heading = Loc.GetString("silicon-laws-law-heading",
                        ("lawDisplayNumber", Laws.ChildCount + 1));
                newLabel.SetHeading(heading);
                newLabel.SetDescription(law);
                Laws.AddChild(newLabel);
            }
        }

        /// <summary>
        ///     Sends a message to state each of the laws in chat.
        /// </summary>
        private void StateLaws()
        {
            _owner.StateLawsMessage();
        }
    }
}
