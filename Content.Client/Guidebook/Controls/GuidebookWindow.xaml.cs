using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls.FancyTree;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;

namespace Content.Client.Guidebook.Controls;

[GenerateTypedNameReferences]
public sealed partial class GuidebookWindow : FancyWindow
{
    [Dependency] private readonly IResourceManager _resourceManager = default!;
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;

    private Dictionary<string, GuideEntry> _entries = new();
    private List<string> _expandedEntryIds = new();
    private bool _firstTimeOpen = true;
    private int? _lastSelectedIndex = default!;

    public GuidebookWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        CollapseToggle.OnPressed += OnCollapseTogglePressed;
        Tree.OnSelectedItemChanged += OnSelectionChanged;
        OnClose += OnClosed;
    }

    private void OnCollapseTogglePressed(BaseButton.ButtonEventArgs _)
    {
        CollapseToggle.Text = CollapseToggle.Pressed ? Loc.GetString("guidebook-collapse-all") : Loc.GetString("guidebook-expand-all");
        Tree.SetAllExpanded(CollapseToggle.Pressed);
    }

    private void OnClosed()
    {
        foreach (var item in Tree.Items)
        {
            if (!item.Expanded || item.Metadata is not GuideEntry entry)
                continue;

            if (!_expandedEntryIds.Contains(entry.Id))
                _expandedEntryIds.Add(entry.Id);
        }

        _lastSelectedIndex = Tree?.SelectedIndex;
    }

    private void OnSelectionChanged(TreeItem? item)
    {
        if (item != null && item.Metadata is GuideEntry entry)
            ShowGuide(entry);
        else
            ClearSelectedGuide();
    }

    public void ClearSelectedGuide()
    {
        Placeholder.Visible = true;
        EntryContainer.Visible = false;
        EntryContainer.RemoveAllChildren();
    }

    private void ShowGuide(GuideEntry entry)
    {
        Scroll.SetScrollValue(default);
        Placeholder.Visible = false;
        EntryContainer.Visible = true;
        EntryContainer.RemoveAllChildren();
        using var file = _resourceManager.ContentFileReadText(entry.Text);

        if (!_parsingMan.TryAddMarkup(EntryContainer, file.ReadToEnd()))
        {
            EntryContainer.AddChild(new Label() { Text = "ERROR: Failed to parse document." });
            Logger.Error($"Failed to parse contents of guide document {entry.Id}.");
        }
    }

    public void UpdateGuides(
        Dictionary<string, GuideEntry> entries,
        List<string>? rootEntries = null,
        string? forceRoot = null,
        string? selected = null)
    {
        _entries = entries;
        RepopulateTree(rootEntries, forceRoot);
        ClearSelectedGuide();

        if (_firstTimeOpen)
        {
            Tree.SetSelectedIndex(0);
            _firstTimeOpen = false;
        }
        else
        {
            foreach (var item in Tree.Items)
            {
                if (item.Metadata is not GuideEntry entry)
                    continue;

                item.SetExpanded(_expandedEntryIds.Contains(entry.Id));
            }

            _expandedEntryIds.Clear();
            Tree.SetSelectedIndex(_lastSelectedIndex);
        }

        Split.State = SplitContainer.SplitState.Auto;
        if (entries.Count == 1)
        {
            TreeBox.Visible = false;
            Split.ResizeMode = SplitContainer.SplitResizeMode.NotResizable;
            selected = entries.Keys.First();
        }
        else
        {
            TreeBox.Visible = true;
            Split.ResizeMode = SplitContainer.SplitResizeMode.RespectChildrenMinSize;
        }

        if (selected != null)
        {
            var item = Tree.Items.FirstOrDefault(x => x.Metadata is GuideEntry entry && entry.Id == selected);
            Tree.SetSelectedIndex(item?.Index);
        }
    }

    private IEnumerable<GuideEntry> GetSortedRootEntries(List<string>? rootEntries)
    {
        if (rootEntries == null)
        {
            HashSet<string> entries = new(_entries.Keys);
            foreach (var entry in _entries.Values)
            {
                entries.ExceptWith(entry.Children);
            }
            rootEntries = entries.ToList();
        }

        return rootEntries
            .Select(x => _entries[x])
            .OrderBy(x => x.Priority)
            .ThenBy(x => Loc.GetString(x.Name));
    }

    private void RepopulateTree(List<string>? roots = null, string? forcedRoot = null)
    {
        Tree.Clear();

        HashSet<string> addedEntries = new();

        TreeItem? parent = forcedRoot == null ? null : AddEntry(forcedRoot, null, addedEntries);
        foreach (var entry in GetSortedRootEntries(roots))
        {
            AddEntry(entry.Id, parent, addedEntries);
        }
    }

    private TreeItem? AddEntry(string id, TreeItem? parent, HashSet<string> addedEntries)
    {
        if (!_entries.TryGetValue(id, out var entry))
            return null;

        if (!addedEntries.Add(id))
        {
            Logger.Error($"Adding duplicate guide entry: {id}");
            return null;
        }

        var item = Tree.AddItem(parent);
        item.Metadata = entry;
        var name = Loc.GetString(entry.Name);
        item.Label.Text = name;

        foreach (var child in entry.Children)
        {
            AddEntry(child, item, addedEntries);
        }

        return item;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        OnClose -= OnClosed;
        CollapseToggle.OnPressed -= OnCollapseTogglePressed;
        Tree.OnSelectedItemChanged -= OnSelectionChanged;
    }
}
